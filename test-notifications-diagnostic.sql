-- ==========================================
-- DIAGNOSTIC COMPLET DES NOTIFICATIONS
-- ==========================================

-- 1. V√©rifier que la table notifications existe
SELECT 'Table notifications existe' AS check_name, 
       CASE WHEN EXISTS (SELECT 1 FROM information_schema.tables WHERE table_name = 'notifications') 
            THEN '‚úÖ OUI' ELSE '‚ùå NON' END AS result;

-- 2. V√©rifier que la table admins a des donn√©es
SELECT 'Nombre d''admins' AS check_name, 
       COUNT(*)::text || ' admin(s)' AS result 
FROM admins;

-- 3. Afficher les admins
SELECT 'Liste des admins:' AS info;
SELECT id, email, full_name FROM admins;

-- 4. V√©rifier que le trigger existe
SELECT 'Trigger existe' AS check_name,
       CASE WHEN EXISTS (
           SELECT 1 FROM pg_trigger 
           WHERE tgname = 'trigger_notify_admins_appointment'
       ) THEN '‚úÖ OUI' ELSE '‚ùå NON' END AS result;

-- 5. V√©rifier que la fonction existe
SELECT 'Fonction existe' AS check_name,
       CASE WHEN EXISTS (
           SELECT 1 FROM pg_proc 
           WHERE proname = 'notify_admins_new_appointment'
       ) THEN '‚úÖ OUI' ELSE '‚ùå NON' END AS result;

-- 6. Compter les notifications existantes
SELECT 'Nombre de notifications' AS check_name,
       COUNT(*)::text || ' notification(s)' AS result
FROM notifications;

-- 7. Afficher les derni√®res notifications
SELECT 'Derni√®res notifications:' AS info;
SELECT id, type, title, message, is_read, created_at 
FROM notifications 
ORDER BY created_at DESC 
LIMIT 5;

-- ==========================================
-- TEST MANUEL : Cr√©er un RDV et v√©rifier
-- ==========================================

DO $$
DECLARE
    test_apt_id UUID;
    notification_count INT;
    admin_count INT;
BEGIN
    -- Compter les admins
    SELECT COUNT(*) INTO admin_count FROM admins;
    
    IF admin_count = 0 THEN
        RAISE NOTICE '‚ùå PROBL√àME: Aucun admin dans la table admins!';
        RAISE NOTICE 'Solution: Cr√©er un compte admin d''abord';
    ELSE
        RAISE NOTICE '‚úÖ OK: % admin(s) trouv√©(s)', admin_count;
    END IF;
    
    -- Cr√©er un rendez-vous de test
    RAISE NOTICE 'üìù Cr√©ation d''un rendez-vous de test...';
    
    INSERT INTO appointments (
        first_name, last_name, email, phone,
        appointment_date, appointment_time, reason, status
    ) VALUES (
        'Test', 'Diagnostic', 'test@diagnostic.com', '0600000000',
        CURRENT_DATE + INTERVAL '7 days', '14:00',
        'Test automatique', 'confirmed'
    ) RETURNING id INTO test_apt_id;
    
    RAISE NOTICE '‚úÖ Rendez-vous cr√©√©: %', test_apt_id;
    
    -- Attendre un instant
    PERFORM pg_sleep(0.5);
    
    -- Compter les notifications cr√©√©es
    SELECT COUNT(*) INTO notification_count 
    FROM notifications 
    WHERE message LIKE '%Test Diagnostic%'
    AND created_at > NOW() - INTERVAL '10 seconds';
    
    IF notification_count > 0 THEN
        RAISE NOTICE '‚úÖ SUCCESS: % notification(s) cr√©√©e(s) automatiquement!', notification_count;
    ELSE
        RAISE NOTICE '‚ùå ERREUR: Aucune notification cr√©√©e par le trigger';
        RAISE NOTICE 'Le trigger existe mais ne fonctionne pas correctement';
    END IF;
    
    -- Nettoyer
    DELETE FROM appointments WHERE id = test_apt_id;
    DELETE FROM notifications WHERE message LIKE '%Test Diagnostic%';
    
    RAISE NOTICE 'üßπ Nettoyage effectu√©';
    
END $$;
