-- ============================================
-- MIGRATION SQL - AJOUT GESTION MULTI-CENTRES
-- ============================================
-- À exécuter dans Supabase SQL Editor
-- Date: 2025-10-17

-- 1. Créer la table des centres
CREATE TABLE IF NOT EXISTS public.centers (
    id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
    name VARCHAR(255) NOT NULL,
    address TEXT NOT NULL,
    city VARCHAR(100) NOT NULL,
    postal_code VARCHAR(10) NOT NULL,
    phone VARCHAR(20),
    email VARCHAR(255),
    is_active BOOLEAN DEFAULT true,
    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
    updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
);

-- 2. Ajouter la colonne center_id à la table appointments
ALTER TABLE public.appointments 
ADD COLUMN IF NOT EXISTS center_id UUID REFERENCES public.centers(id);

-- 3. Insérer les deux centres
INSERT INTO public.centers (id, name, address, city, postal_code, phone, email, is_active) 
VALUES 
    ('11111111-1111-1111-1111-111111111111', 'Centre de Clichy', '82 Rue Henri Barbusse', 'Clichy', '92110', '07 65 56 53 79', 'contact@test-psychotechnique-permis.com', true),
    ('22222222-2222-2222-2222-222222222222', 'Pro Drive Academy', '14 Rue de Mantes', 'Colombes', '92700', '0972132250', 'reservation@mon-permis-auto.com', true)
ON CONFLICT (id) DO NOTHING;

-- 4. Mettre à jour les rendez-vous existants pour les associer au centre de Clichy par défaut
UPDATE public.appointments 
SET center_id = '11111111-1111-1111-1111-111111111111'
WHERE center_id IS NULL;

-- 5. Rendre la colonne center_id obligatoire maintenant que tous les rendez-vous ont un centre
ALTER TABLE public.appointments 
ALTER COLUMN center_id SET NOT NULL;

-- 6. Créer un index pour améliorer les performances des requêtes par centre
CREATE INDEX IF NOT EXISTS idx_appointments_center_id ON public.appointments(center_id);
CREATE INDEX IF NOT EXISTS idx_appointments_center_date ON public.appointments(center_id, appointment_date);

-- 6b. Ajouter center_id à la table available_slots
ALTER TABLE public.available_slots 
ADD COLUMN IF NOT EXISTS center_id UUID REFERENCES public.centers(id);

-- Associer les créneaux existants au centre de Clichy par défaut
UPDATE public.available_slots 
SET center_id = '11111111-1111-1111-1111-111111111111'
WHERE center_id IS NULL;

-- Rendre la colonne obligatoire
ALTER TABLE public.available_slots 
ALTER COLUMN center_id SET NOT NULL;

-- Créer un index pour les créneaux par centre
CREATE INDEX IF NOT EXISTS idx_available_slots_center_id ON public.available_slots(center_id);
CREATE INDEX IF NOT EXISTS idx_available_slots_center_date ON public.available_slots(center_id, date);

-- 7. Créer une fonction pour mettre à jour automatiquement updated_at
CREATE OR REPLACE FUNCTION update_updated_at_column()
RETURNS TRIGGER AS $$
BEGIN
    NEW.updated_at = NOW();
    RETURN NEW;
END;
$$ LANGUAGE plpgsql;

-- 8. Créer un trigger pour la table centers
DROP TRIGGER IF EXISTS update_centers_updated_at ON public.centers;
CREATE TRIGGER update_centers_updated_at
    BEFORE UPDATE ON public.centers
    FOR EACH ROW
    EXECUTE FUNCTION update_updated_at_column();

-- 9. Créer des politiques RLS pour la table centers
ALTER TABLE public.centers ENABLE ROW LEVEL SECURITY;

DROP POLICY IF EXISTS "Public can read active centers" ON public.centers;
CREATE POLICY "Public can read active centers" ON public.centers
    FOR SELECT
    USING (is_active = true);

DROP POLICY IF EXISTS "Admins can manage centers" ON public.centers;
CREATE POLICY "Admins can manage centers" ON public.centers
    FOR ALL
    USING (true)
    WITH CHECK (true);

-- Politique complète pour les admins (à adapter selon votre système d'auth)
DROP POLICY IF EXISTS "Admins have full access to centers" ON public.centers;
CREATE POLICY "Admins have full access to centers" ON public.centers
    FOR ALL
    USING (true);

-- 10. Vérification finale
SELECT 'Migration terminée avec succès!' AS status;
SELECT * FROM public.centers ORDER BY name;

-- ============================================
-- NOTES IMPORTANTES
-- ============================================
-- 1. Les IDs des centres sont fixes pour faciliter les références dans le code:
--    - Clichy: 11111111-1111-1111-1111-111111111111
--    - Colombes: 22222222-2222-2222-2222-222222222222
--
-- 2. Tous les rendez-vous existants sont automatiquement associés au centre de Clichy
--
-- 3. Les nouveaux rendez-vous devront obligatoirement spécifier un center_id
--
-- 4. Pour ajouter un nouveau centre à l'avenir, utilisez:
--    INSERT INTO public.centers (name, address, city, postal_code, phone, email) 
--    VALUES ('Nom du centre', 'Adresse', 'Ville', 'Code postal', 'Téléphone', 'Email');
