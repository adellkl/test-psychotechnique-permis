╔═══════════════════════════════════════════════════════════════════════════════╗
║                    GUIDE DE MISE À JOUR - SYSTÈME MULTI-CENTRES              ║
║                           Test Psychotechnique Permis                         ║
╚═══════════════════════════════════════════════════════════════════════════════╝

📅 Date de mise à jour : 17 Octobre 2025
👤 Développeur : Cascade AI
🎯 Objectif : Ajouter la gestion de plusieurs centres (Clichy + Colombes)

═══════════════════════════════════════════════════════════════════════════════

📋 TABLE DES MATIÈRES
═══════════════════════════════════════════════════════════════════════════════

1. Vue d'ensemble des modifications
2. Étape 1 : Migration de la base de données
3. Étape 2 : Modifications du code
4. Étape 3 : Configuration des emails
5. Étape 4 : Interface admin
6. Étape 5 : Tests et validation
7. Informations importantes

═══════════════════════════════════════════════════════════════════════════════

1. VUE D'ENSEMBLE DES MODIFICATIONS
═══════════════════════════════════════════════════════════════════════════════

✅ FONCTIONNALITÉS AJOUTÉES :
   • Sélection du centre lors de la réservation (Clichy ou Colombes)
   • Filtrage des créneaux disponibles par centre
   • Filtrage des rendez-vous par centre dans l'interface admin
   • Affichage du centre dans les emails de confirmation
   • Gestion multi-centres complète

🗂️ FICHIERS CRÉÉS :
   • MIGRATION_CENTERS_SQL.txt - Script SQL de migration
   • CODE_SELECTION_CENTRE.txt - Code pour la sélection du centre
   • app/admin/components/CenterFilter.tsx - Composant de filtrage admin
   • GUIDE_MULTI_CENTRES.txt - Ce guide

📝 FICHIERS MODIFIÉS :
   • app/prendre-rendez-vous/page.tsx - Ajout sélection centre
   • components/Calendar.tsx - Support du filtrage par centre
   • lib/supabase.ts - Ajout interface Center
   • app/api/available-slots/route.ts - Filtrage par centre
   • app/api/send-appointment-emails/route.ts - Données du centre
   • lib/emailService.ts - Templates avec info centre
   • app/admin/dashboard/page.tsx - Filtrage admin par centre

═══════════════════════════════════════════════════════════════════════════════

2. ÉTAPE 1 : MIGRATION DE LA BASE DE DONNÉES
═══════════════════════════════════════════════════════════════════════════════

⚠️ IMPORTANT : Cette étape est OBLIGATOIRE avant de déployer le code !

📍 MARCHE À SUIVRE :

1. Ouvrez Supabase SQL Editor
   URL : https://hzfpscgdyrqbplmhgwhi.supabase.co

2. Copiez le contenu du fichier MIGRATION_CENTERS_SQL.txt

3. Collez et exécutez le script SQL complet

4. Vérifiez que le script s'est exécuté sans erreur

5. Vérifiez que les deux centres ont été créés :
   SELECT * FROM centers;

   Résultat attendu :
   ┌──────────────────────────────────────┬─────────────────────┬─────────────────────────┐
   │ id                                   │ name                │ city                    │
   ├──────────────────────────────────────┼─────────────────────┼─────────────────────────┤
   │ 11111111-1111-1111-1111-111111111111 │ Centre de Clichy    │ Clichy                  │
   │ 22222222-2222-2222-2222-222222222222 │ Centre de Colombes  │ Colombes                │
   └──────────────────────────────────────┴─────────────────────┴─────────────────────────┘

🔑 IDS FIXES DES CENTRES :
   • Clichy   : 11111111-1111-1111-1111-111111111111
   • Colombes : 22222222-2222-2222-2222-222222222222

📊 STRUCTURE DE LA TABLE CENTERS :
   • id (UUID) - Identifiant unique
   • name (VARCHAR) - Nom du centre
   • address (TEXT) - Adresse complète
   • city (VARCHAR) - Ville
   • postal_code (VARCHAR) - Code postal
   • phone (VARCHAR) - Téléphone
   • email (VARCHAR) - Email de contact
   • is_active (BOOLEAN) - Centre actif ou non
   • created_at (TIMESTAMP) - Date de création
   • updated_at (TIMESTAMP) - Date de modification

📊 MODIFICATION DE LA TABLE APPOINTMENTS :
   • Ajout de la colonne center_id (UUID, NOT NULL)
   • Clé étrangère vers centers(id)
   • Index pour améliorer les performances
   • Tous les rendez-vous existants sont associés à Clichy par défaut

📊 MODIFICATION DE LA TABLE AVAILABLE_SLOTS :
   ⚠️ IMPORTANT : Vous devez ajouter manuellement center_id aux créneaux existants !
   
   ALTER TABLE available_slots ADD COLUMN IF NOT EXISTS center_id UUID REFERENCES centers(id);
   
   -- Associer les créneaux existants à Clichy
   UPDATE available_slots SET center_id = '11111111-1111-1111-1111-111111111111' WHERE center_id IS NULL;
   
   -- Rendre la colonne obligatoire
   ALTER TABLE available_slots ALTER COLUMN center_id SET NOT NULL;

═══════════════════════════════════════════════════════════════════════════════

3. ÉTAPE 2 : MODIFICATIONS DU CODE
═══════════════════════════════════════════════════════════════════════════════

📄 FICHIER : app/prendre-rendez-vous/page.tsx

MODIFICATIONS PRINCIPALES :
   ✓ Ajout d'une étape 0 pour la sélection du centre
   ✓ État selectedCenter pour stocker le centre choisi
   ✓ Fonction handleCenterSelect pour gérer la sélection
   ✓ Passage du center_id à l'API lors de la création du rendez-vous
   ✓ Affichage du centre sélectionné dans les étapes suivantes
   ✓ Mise à jour de la barre de progression (4 étapes au lieu de 3)

⚠️ ATTENTION : Le fichier est très long (750+ lignes). Référez-vous au fichier
   CODE_SELECTION_CENTRE.txt pour les extraits de code à ajouter.

ÉTAPES DE RÉSERVATION MISES À JOUR :
   0. Sélection du centre (NOUVEAU)
   1. Sélection du créneau
   2. Informations personnelles
   3. Confirmation

─────────────────────────────────────────────────────────────────────────────

📄 FICHIER : components/Calendar.tsx

MODIFICATIONS :
   ✓ Ajout du prop centerId?: string
   ✓ Filtrage des créneaux par centre via l'API
   ✓ Mise à jour du useEffect pour recharger lors du changement de centre

CODE AJOUTÉ :
   interface CalendarProps {
     onSlotSelect: (date: string, time: string) => void
     selectedDate?: string
     selectedTime?: string
     centerId?: string  // ← NOUVEAU
   }

   // Dans fetchAvailableSlots :
   const centerParam = centerId ? `&centerId=${centerId}` : ''
   const response = await fetch(`/api/available-slots?...${centerParam}`)

─────────────────────────────────────────────────────────────────────────────

📄 FICHIER : lib/supabase.ts

MODIFICATIONS :
   ✓ Ajout de center_id dans l'interface Appointment
   ✓ Création de l'interface Center

CODE AJOUTÉ :
   export interface Appointment {
     // ... champs existants
     center_id: string  // ← NOUVEAU
   }

   export interface Center {
     id: string
     name: string
     address: string
     city: string
     postal_code: string
     phone: string
     email: string
     is_active: boolean
     created_at: string
     updated_at: string
   }

─────────────────────────────────────────────────────────────────────────────

📄 FICHIER : app/api/available-slots/route.ts

MODIFICATIONS :
   ✓ Récupération du paramètre centerId depuis l'URL
   ✓ Filtrage des créneaux par centre si centerId est fourni
   ✓ Filtrage des rendez-vous par centre pour vérifier la disponibilité

CODE MODIFIÉ :
   const centerId = searchParams.get('centerId')
   
   let query = supabase.from('available_slots')...
   if (centerId) {
     query = query.eq('center_id', centerId)
   }

═══════════════════════════════════════════════════════════════════════════════

4. ÉTAPE 3 : CONFIGURATION DES EMAILS
═══════════════════════════════════════════════════════════════════════════════

📄 FICHIER : app/api/send-appointment-emails/route.ts

MODIFICATIONS :
   ✓ Ajout des champs center_name, center_address, center_city, center_postal_code
   ✓ Transmission de ces données aux fonctions d'envoi d'email
   ✓ Valeurs par défaut pour Clichy si non fournies

CODE AJOUTÉ :
   const sanitizedData = {
     // ... champs existants
     center_name: appointmentData.center_name || 'Centre de Clichy',
     center_address: appointmentData.center_address || '82 Rue Henri Barbusse',
     center_city: appointmentData.center_city || 'Clichy',
     center_postal_code: appointmentData.center_postal_code || '92110'
   }

─────────────────────────────────────────────────────────────────────────────

📄 FICHIER : lib/emailService.ts

MODIFICATIONS :
   ✓ Ajout des paramètres de centre dans sendAppointmentConfirmation
   ✓ Ajout des paramètres de centre dans sendAppointmentNotificationToAdmin
   ✓ Utilisation dynamique des informations du centre dans les templates
   ✓ Adaptation des détails de localisation selon le centre

TEMPLATES MIS À JOUR :
   • Email client : Affiche le nom et l'adresse du centre sélectionné
   • Email admin : Affiche le centre dans les détails du rendez-vous

VARIABLES DE TEMPLATE :
   {{location}} → Nom du centre
   {{address}} → Adresse complète du centre
   {{location_details}} → Détails d'accès (métro pour Clichy, générique pour autres)

═══════════════════════════════════════════════════════════════════════════════

5. ÉTAPE 4 : INTERFACE ADMIN
═══════════════════════════════════════════════════════════════════════════════

📄 NOUVEAU FICHIER : app/admin/components/CenterFilter.tsx

FONCTIONNALITÉS :
   ✓ Composant de sélection de centre pour l'admin
   ✓ Récupération automatique des centres actifs
   ✓ Option "Tous les centres" par défaut
   ✓ Bouton de réinitialisation du filtre
   ✓ Design cohérent avec l'interface admin

UTILISATION :
   <CenterFilter
     selectedCenterId={selectedCenterId}
     onCenterChange={setSelectedCenterId}
   />

─────────────────────────────────────────────────────────────────────────────

📄 FICHIER : app/admin/dashboard/page.tsx

MODIFICATIONS :
   ✓ Import du composant CenterFilter
   ✓ Ajout de l'état selectedCenterId
   ✓ Filtrage des rendez-vous par centre dans useEffect
   ✓ Affichage du filtre au-dessus du tableau des rendez-vous

LOGIQUE DE FILTRAGE :
   1. Filtre par centre (si sélectionné)
   2. Puis filtre par recherche (si active)
   3. Affichage du nombre de résultats

═══════════════════════════════════════════════════════════════════════════════

6. ÉTAPE 5 : TESTS ET VALIDATION
═══════════════════════════════════════════════════════════════════════════════

✅ CHECKLIST DE VALIDATION :

□ BASE DE DONNÉES
  □ Script SQL exécuté sans erreur
  □ Table centers créée avec 2 centres
  □ Colonne center_id ajoutée à appointments
  □ Colonne center_id ajoutée à available_slots
  □ Rendez-vous existants associés à Clichy
  □ Créneaux existants associés à un centre

□ PAGE DE RÉSERVATION
  □ Étape 0 : Sélection du centre s'affiche
  □ Les 2 centres sont visibles (Clichy et Colombes)
  □ Clic sur un centre passe à l'étape 1
  □ Le centre sélectionné s'affiche dans l'étape 1
  □ Bouton "Changer" permet de revenir à l'étape 0
  □ Les créneaux affichés correspondent au centre choisi
  □ Le centre s'affiche dans l'étape 2 (infos personnelles)
  □ Le centre s'affiche dans la confirmation (étape 3)
  □ La barre de progression affiche 4 étapes

□ CRÉATION DE RENDEZ-VOUS
  □ Le rendez-vous est créé avec le bon center_id
  □ Vérification dans Supabase : SELECT * FROM appointments ORDER BY created_at DESC LIMIT 1;
  □ La colonne center_id contient l'ID correct

□ EMAILS
  □ Email client reçu avec le bon nom de centre
  □ Email client contient la bonne adresse
  □ Email admin reçu avec les infos du centre
  □ Pas d'erreur dans les logs d'envoi

□ INTERFACE ADMIN
  □ Filtre de centre visible au-dessus du tableau
  □ Option "Tous les centres" fonctionne
  □ Sélection d'un centre filtre correctement
  □ Bouton de réinitialisation fonctionne
  □ Le nombre de rendez-vous affiché est correct
  □ La recherche fonctionne avec le filtre de centre

□ API
  □ /api/available-slots?centerId=XXX retourne les bons créneaux
  □ /api/available-slots sans centerId retourne tous les créneaux
  □ Pas d'erreur 500 dans les logs

═══════════════════════════════════════════════════════════════════════════════

7. INFORMATIONS IMPORTANTES
═══════════════════════════════════════════════════════════════════════════════

🔐 IDENTIFIANTS FIXES DES CENTRES :

   Centre de Clichy :
   • ID : 11111111-1111-1111-1111-111111111111
   • Adresse : 82 Rue Henri Barbusse, 92110 Clichy
   • Téléphone : 07 65 56 53 79

   Centre de Colombes :
   • ID : 22222222-2222-2222-2222-222222222222
   • Adresse : 14 rue de Mantes, 92700 Colombes
   • Téléphone : 07 65 56 53 79

─────────────────────────────────────────────────────────────────────────────

⚠️ POINTS D'ATTENTION :

1. CRÉNEAUX DISPONIBLES :
   • Vous devez créer des créneaux pour le centre de Colombes !
   • Utilisez l'interface admin ou SQL pour ajouter des available_slots
   • N'oubliez pas de spécifier le center_id pour chaque créneau

   Exemple SQL :
   INSERT INTO available_slots (date, start_time, end_time, center_id, is_available)
   VALUES ('2025-10-20', '09:00:00', '09:40:00', '22222222-2222-2222-2222-222222222222', true);

2. MIGRATION DES DONNÉES :
   • Tous les rendez-vous existants sont automatiquement associés à Clichy
   • Les créneaux existants doivent être associés manuellement (voir section 2)

3. COMPATIBILITÉ :
   • Le code est rétrocompatible : si center_id n'est pas fourni, Clichy est utilisé par défaut
   • Les anciens rendez-vous sans centre fonctionnent toujours

4. PERFORMANCE :
   • Des index ont été ajoutés pour optimiser les requêtes par centre
   • Les requêtes sont filtrées côté base de données pour de meilleures performances

─────────────────────────────────────────────────────────────────────────────

📞 SUPPORT ET DÉPANNAGE :

PROBLÈME : Les centres ne s'affichent pas dans la page de réservation
SOLUTION : Vérifiez que la table centers contient des centres avec is_active = true

PROBLÈME : Aucun créneau disponible pour Colombes
SOLUTION : Créez des créneaux avec center_id = '22222222-2222-2222-2222-222222222222'

PROBLÈME : Erreur "center_id cannot be null"
SOLUTION : Exécutez le script SQL pour ajouter la colonne et les valeurs par défaut

PROBLÈME : Le filtre admin ne fonctionne pas
SOLUTION : Vérifiez que tous les rendez-vous ont un center_id (pas de NULL)

PROBLÈME : Les emails affichent toujours "Clichy"
SOLUTION : Vérifiez que les données du centre sont bien passées à l'API d'envoi d'email

─────────────────────────────────────────────────────────────────────────────

🚀 PROCHAINES ÉTAPES SUGGÉRÉES :

1. Ajouter une page admin pour gérer les centres
   • Créer/modifier/désactiver des centres
   • Gérer les informations de contact

2. Ajouter des statistiques par centre
   • Nombre de rendez-vous par centre
   • Taux de remplissage par centre

3. Permettre des horaires différents par centre
   • Créneaux spécifiques à chaque centre
   • Jours d'ouverture différents

4. Ajouter des photos des centres
   • Galerie d'images pour chaque centre
   • Affichage sur la page de sélection

═══════════════════════════════════════════════════════════════════════════════

📝 NOTES DE VERSION
═══════════════════════════════════════════════════════════════════════════════

Version 2.0 - Multi-Centres
Date : 17 Octobre 2025

AJOUTS :
• Système de gestion multi-centres
• Sélection du centre lors de la réservation
• Filtrage admin par centre
• Informations du centre dans les emails

MODIFICATIONS :
• Structure de la base de données (ajout table centers)
• Interface de réservation (nouvelle étape)
• API de créneaux disponibles (filtrage par centre)
• Templates d'emails (données dynamiques du centre)

COMPATIBILITÉ :
• Rétrocompatible avec les rendez-vous existants
• Migration automatique vers le centre de Clichy
• Valeurs par défaut pour éviter les erreurs

═══════════════════════════════════════════════════════════════════════════════

✅ FIN DU GUIDE - Système multi-centres prêt à être déployé !

Pour toute question ou problème, référez-vous à ce guide ou consultez les
fichiers de code source modifiés.

Bonne chance avec le déploiement ! 🚀

═══════════════════════════════════════════════════════════════════════════════
